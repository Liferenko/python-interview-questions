# Python Interview Questions

This repository contains a number of Python interview questions that can be 
used when vetting potential candidates. It is not advised to use every one of 
these questions for the same candidate.

## Descriptive/Vocabulary Questions

**1. What is Python?**
Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.

**1. Describe some features of Python.**
Some of Python's notable features:

- Simple. Feels almost like reading English, although very strict English!
- Easy to Learn
- High-level Language. Never need to bother about the low-level details such as managing the memory.
- Portable. Almost all OSs.
- Interpreted. Python converts the source code into an intermediate form called bytecodes and then translates this into the native language of your computer and then runs it.
- Object oriented. In procedure-oriented languages, the program is built around procedures or functions which are nothing but reusable pieces of programs. In object-oriented languages, the program is built around objects which combine data and functionality. "Get You a Man Who Can Do Both"
- Extensible. Do C\C++ and use in Python if you need. 
- Embeddable. Embed Python within your C/C++ programs to give 'scripting' capabilities.
- Extensive Libraries. Say no more.

<a href="https://www.ibiblio.org/g2swap/byteofpython/read/features-of-python.html">more</a>

*1. How does Python execute code?*
program (.py) -> interpreter makes bytecode .pyc (compiled) -> 101110010001001

<a href="https://www.safaribooksonline.com/library/view/head-first-programming/9780596806682/httpatomoreillycomsourceoreillyimages1754076.png.jpg"><img src="https://www.safaribooksonline.com/library/view/head-first-programming/9780596806682/httpatomoreillycomsourceoreillyimages1754076.png.jpg"></a>

**1. What are some built-in types in Python?**
- numerics
- sequences
- mappings
- classes
- instances
- exceptions

<a href="https://docs.python.org/3/library/stdtypes.html#built-in-types">more</a>

**1. What are bindings, i.e., what does it mean for a value to be bound to a variable?**

a ---> [1, 2] <--- b

<a href="https://mathieularose.com/python-variables/">more</a>   

## Usage Questions

**1. How do you create a list?**

<a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists"><img src="http://hackaholic.info/wp-content/uploads/2017/11/python-lists.jpg"></a>

**1. How do you create a dictionary?**

<a href="https://www.tutorialspoint.com/python/python_dictionary.html"><img src="http://www.kdjohar.in/media/blogs/2017/06/06/python-dictionary.jpg"></a>


**1. What is a list comprehension? Why would you use one?**

It can be used to construct lists in a very natural, easy way, like a mathematician is used to do.

<a href="https://datasciencelab.wordpress.com/2014/01/08/list-comprehension-in-python/"><img src="https://datasciencelab.files.wordpress.com/2014/01/list1.jpg?w=830"></a>

**1. What is an iterator?**

<a href="http://anandology.com/python-practice-book/iterators.html"><img src="https://camo.githubusercontent.com/22ae49a8975b8d293c93669222932921a0400271/687474703a2f2f7777772e626f676f746f626f676f2e636f6d2f707974686f6e2f696d616765732f707974686f6e5f6974657261746f72732f6974657261626c652d76732d6974657261746f722e706e67"></a>


**1. What is a generator? What can it be used for?**

Generators simplifies creation of iterators. A generator is a function that produces a sequence of results instead of a single value.

<a href="http://anandology.com/python-practice-book/iterators.html#generators">more</a>

**1. What is inheritance?**

<a href="http://www.trytoprogram.com/python-programming/python-inheritance/"><img src="http://www.trytoprogram.com/images/python-inheritance.jpg"></a>

**1. What happens if you have an error in an ''__init__'' statement?**

If you have no ''__init__.py'' - your package can't be identified as package.

If an error in class -  class can't be called in code.

<a href="https://docs.python.org/2/reference/datamodel.html#object.__init__">more</a>


**1. What happens in python if you try to divide by zero?**

In console you will find "ZeroDivisionError: division by zero".

<a href="https://stackoverflow.com/questions/22085864/python-divide-by-0-error">more</a>


**1. How can you improve the following code?**

   ```python
   import string

   i = 0
   for letter in string.letters:
       print("The letter at index %i is %s" % (i, letter))
       i = i + 1
   ```

   Bonus points for mentioning `enumerate` and use of `str.format`.

**1. How can you return multiple values from a function/method?**
- Tuple
- Oblect
- List
- Dict

<a href="https://stackoverflow.com/questions/354883/how-do-you-return-multiple-values-in-python">more</a>

## Strategic Questions

1. What's the fastest way to swap the values bound to two variables?
- Using temporary variable
- Without Using Temporary Variable. 
- Addition and Subtraction
- Multiplication and Division
- XOR swap (integer only)

<a href="https://www.programiz.com/python-programming/examples/swap-variables">more</a>

1. What is the importance of reference counting?

A remembers B. B remembers A. It's infinity cicle. Someone have to say "Stop" to them. Garbage collector

<a href="https://docs.python.org/2.0/ext/refcountsInPython.html">more</a>

1. Do functions (or methods) return something even if there isn't a `return` statement? If so, what do they return?

1. How do you reverse a list? Can you come up with at least three ways? 

- L.reverse()
- L[::-1]   *(Slicing Operator)*
- for o in reversed(L) *(individual reverse)*


<a href="https://docs.python.org/2.0/ext/refcountsInPython.html">more</a>



1. How would you merge two sorted lists? They can be any length, or empty. 

1. How would you count the lines in a file? How would you do it if the file was too big to hold in memory?





